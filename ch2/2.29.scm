(define (make-mobile left right) (list left right))
(define (make-branch length structure) (list length structure))
(define (left-branch m) (car m))
(define (right-branch m) (cadr m))
(define (branch-length b) (car b))
(define (branch-structure b) (cadr b))

(define (total-weight m)
  (let ((left (left-branch m))
        (right (right-branch m)))
    (define left-structure (branch-structure left))
    (define right-structure (branch-structure right))
    (define left-length (branch-length left))
    (define right-length (branch-length right))
    (+ (if (pair? left-structure) (total-weight left-structure) left-structure)
       (if (pair? right-structure) (total-weight right-structure) right-structure))))

(define (branch-torque branch)
  (let ((length (branch-length branch))
        (structure (branch-structure branch)))
    (if (pair? structure)
        (* length (total-weight structure))
        (* length structure))))

(define (mobile-balanced? m)
  (let ((left (left-branch m))
        (right (right-branch m)))
    (define left-structure (branch-structure left))
    (define right-structure (branch-structure right))
    (define left-length (branch-length left))
    (define right-length (branch-length right))
    (cond ((and (pair? left-structure) (pair? right-structure))
           (and (mobile-balanced? left-structure)
                (mobile-balanced? right-structure)
                (= (branch-torque left) (branch-torque right))))
          ((and (not (pair? left-structure)) (not (pair? right-structure)))
           (= (branch-torque left) (branch-torque right)))
          (else #f))))

;;; 当把constructor中的list改为cons后，需要修改的只是selectors中的right-branch和branch-structure。
;;; 基于cons和list的不同，只需要把cadr修改为cdr即可。
